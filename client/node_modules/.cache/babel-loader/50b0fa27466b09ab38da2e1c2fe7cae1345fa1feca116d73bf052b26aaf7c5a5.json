{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\MAYANK\\\\DEV Flow\\\\devflow-project\\\\client\\\\src\\\\context\\\\SocketProvider.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport io from 'socket.io-client';\nimport { AuthContext } from './AuthProvider'; // Import AuthContext to know when to connect\n\n// Create the context for the socket\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SocketContext = /*#__PURE__*/createContext(null);\n\n/**\r\n * ==============================================================================\r\n * FILE: /client/src/context/SocketProvider.jsx\r\n * PURPOSE: Manages the Socket.IO connection for the entire application.\r\n * It connects when a user logs in and disconnects when they log out.\r\n * ==============================================================================\r\n */\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const {\n    isAuthenticated,\n    user\n  } = useContext(AuthContext);\n  useEffect(() => {\n    // Only attempt to connect if the user is authenticated\n    if (isAuthenticated) {\n      // Connect to the backend server. The URL should be in an environment variable.\n      const newSocket = io('http://localhost:5000', {\n        // Pass the auth token to the server for authentication\n        query: {\n          token: localStorage.getItem('token')\n        }\n      });\n      newSocket.on('connect', () => {\n        console.log('Socket.IO connected successfully!');\n        // You can have the socket join rooms based on user ID or teams\n        // newSocket.emit('joinRoom', `user_${user.id}`);\n      });\n      newSocket.on('disconnect', () => {\n        console.log('Socket.IO disconnected.');\n      });\n      setSocket(newSocket);\n\n      // Cleanup function: disconnect the socket when the component unmounts\n      // or when the user logs out (isAuthenticated becomes false).\n      return () => {\n        newSocket.disconnect();\n      };\n    } else if (socket) {\n      // If the user logs out, disconnect the existing socket\n      socket.disconnect();\n      setSocket(null);\n    }\n  }, [isAuthenticated, user]); // Re-run this effect when authentication state changes\n\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: socket,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(SocketProvider, \"nvm5/A6bf/6p0zwtE6ctZRjWD5M=\");\n_c = SocketProvider;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","io","AuthContext","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","socket","setSocket","isAuthenticated","user","newSocket","query","token","localStorage","getItem","on","console","log","disconnect","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Users/MAYANK/DEV Flow/devflow-project/client/src/context/SocketProvider.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport io from 'socket.io-client';\r\nimport { AuthContext } from './AuthProvider'; // Import AuthContext to know when to connect\r\n\r\n// Create the context for the socket\r\nexport const SocketContext = createContext(null);\r\n\r\n/**\r\n * ==============================================================================\r\n * FILE: /client/src/context/SocketProvider.jsx\r\n * PURPOSE: Manages the Socket.IO connection for the entire application.\r\n * It connects when a user logs in and disconnects when they log out.\r\n * ==============================================================================\r\n */\r\nexport const SocketProvider = ({ children }) => {\r\n  const [socket, setSocket] = useState(null);\r\n  const { isAuthenticated, user } = useContext(AuthContext);\r\n\r\n  useEffect(() => {\r\n    // Only attempt to connect if the user is authenticated\r\n    if (isAuthenticated) {\r\n      // Connect to the backend server. The URL should be in an environment variable.\r\n      const newSocket = io('http://localhost:5000', {\r\n        // Pass the auth token to the server for authentication\r\n        query: { token: localStorage.getItem('token') },\r\n      });\r\n\r\n      newSocket.on('connect', () => {\r\n        console.log('Socket.IO connected successfully!');\r\n        // You can have the socket join rooms based on user ID or teams\r\n        // newSocket.emit('joinRoom', `user_${user.id}`);\r\n      });\r\n\r\n      newSocket.on('disconnect', () => {\r\n        console.log('Socket.IO disconnected.');\r\n      });\r\n\r\n      setSocket(newSocket);\r\n\r\n      // Cleanup function: disconnect the socket when the component unmounts\r\n      // or when the user logs out (isAuthenticated becomes false).\r\n      return () => {\r\n        newSocket.disconnect();\r\n      };\r\n    } else if (socket) {\r\n      // If the user logs out, disconnect the existing socket\r\n      socket.disconnect();\r\n      setSocket(null);\r\n    }\r\n  }, [isAuthenticated, user]); // Re-run this effect when authentication state changes\r\n\r\n  return (\r\n    <SocketContext.Provider value={socket}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7E,OAAOC,EAAE,MAAM,kBAAkB;AACjC,SAASC,WAAW,QAAQ,gBAAgB,CAAC,CAAC;;AAE9C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,aAAa,gBAAGR,aAAa,CAAC,IAAI,CAAC;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM;IAAEa,eAAe;IAAEC;EAAK,CAAC,GAAGZ,UAAU,CAACE,WAAW,CAAC;EAEzDH,SAAS,CAAC,MAAM;IACd;IACA,IAAIY,eAAe,EAAE;MACnB;MACA,MAAME,SAAS,GAAGZ,EAAE,CAAC,uBAAuB,EAAE;QAC5C;QACAa,KAAK,EAAE;UAAEC,KAAK,EAAEC,YAAY,CAACC,OAAO,CAAC,OAAO;QAAE;MAChD,CAAC,CAAC;MAEFJ,SAAS,CAACK,EAAE,CAAC,SAAS,EAAE,MAAM;QAC5BC,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;QAChD;QACA;MACF,CAAC,CAAC;MAEFP,SAAS,CAACK,EAAE,CAAC,YAAY,EAAE,MAAM;QAC/BC,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACxC,CAAC,CAAC;MAEFV,SAAS,CAACG,SAAS,CAAC;;MAEpB;MACA;MACA,OAAO,MAAM;QACXA,SAAS,CAACQ,UAAU,CAAC,CAAC;MACxB,CAAC;IACH,CAAC,MAAM,IAAIZ,MAAM,EAAE;MACjB;MACAA,MAAM,CAACY,UAAU,CAAC,CAAC;MACnBX,SAAS,CAAC,IAAI,CAAC;IACjB;EACF,CAAC,EAAE,CAACC,eAAe,EAAEC,IAAI,CAAC,CAAC,CAAC,CAAC;;EAE7B,oBACER,OAAA,CAACC,aAAa,CAACiB,QAAQ;IAACC,KAAK,EAAEd,MAAO;IAAAF,QAAA,EACnCA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACnB,EAAA,CA1CWF,cAAc;AAAAsB,EAAA,GAAdtB,cAAc;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}