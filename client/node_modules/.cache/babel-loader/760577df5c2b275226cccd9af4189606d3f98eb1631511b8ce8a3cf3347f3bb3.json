{"ast":null,"code":"var _jsxFileName = \"D:\\\\Users\\\\MAYANK\\\\DEV Flow\\\\devflow-project\\\\client\\\\src\\\\context\\\\AuthProvider.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport api from '../api/api'; // Your configured Axios instance\n\n// Create the context that components will consume\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext(null);\n\n/**\r\n * ==============================================================================\r\n * FILE: /client/src/context/AuthProvider.jsx\r\n * PURPOSE: Manages global authentication state (user, token, loading status)\r\n * and provides login/logout functions to the entire application.\r\n * ==============================================================================\r\n */\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true); // To handle initial auth check\n\n  // This effect runs once on app startup to check if a user is already logged in\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      // In a real app, you'd make an API call to a '/me' or '/verify' endpoint\n      // to get the user's data from the server and confirm the token is valid.\n      // For now, we'll simulate this by decoding the token.\n      try {\n        const decodedUser = JSON.parse(atob(token.split('.')[1])); // NOTE: Not secure for production\n        setUser(decodedUser);\n        api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      } catch (error) {\n        console.error(\"Failed to decode token on initial load:\", error);\n        localStorage.removeItem('token'); // Clear invalid token\n      }\n    }\n    setLoading(false); // Finished checking, app can now render\n  }, []);\n\n  // --- Authentication Functions ---\n\n  const login = async (email, password) => {\n    try {\n      // In a real app, this would be:\n      // const response = await api.post('/auth/login', { email, password });\n      // const { token, user } = response.data;\n\n      // Mock implementation for demonstration:\n      const mockUser = {\n        name: 'Totok Michael',\n        email: email,\n        role: 'Admin'\n      };\n      // Create a fake JWT token for local storage\n      const fakeToken = `header.${btoa(JSON.stringify(mockUser))}.signature`;\n      localStorage.setItem('token', fakeToken);\n      api.defaults.headers.common['Authorization'] = `Bearer ${fakeToken}`;\n      setUser(mockUser);\n      return mockUser;\n    } catch (error) {\n      console.error(\"Login failed:\", error);\n      // Here you would handle login errors (e.g., show a toast notification)\n      throw error;\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    delete api.defaults.headers.common['Authorization'];\n    setUser(null);\n    // You would typically redirect the user to the login page here\n  };\n\n  // The value that will be available to all consuming components\n  const value = {\n    user,\n    isAuthenticated: !!user,\n    loading,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","api","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","token","localStorage","getItem","decodedUser","JSON","parse","atob","split","defaults","headers","common","error","console","removeItem","login","email","password","mockUser","name","role","fakeToken","btoa","stringify","setItem","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Users/MAYANK/DEV Flow/devflow-project/client/src/context/AuthProvider.jsx"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\nimport api from '../api/api'; // Your configured Axios instance\r\n\r\n// Create the context that components will consume\r\nexport const AuthContext = createContext(null);\r\n\r\n/**\r\n * ==============================================================================\r\n * FILE: /client/src/context/AuthProvider.jsx\r\n * PURPOSE: Manages global authentication state (user, token, loading status)\r\n * and provides login/logout functions to the entire application.\r\n * ==============================================================================\r\n */\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true); // To handle initial auth check\r\n\r\n  // This effect runs once on app startup to check if a user is already logged in\r\n  useEffect(() => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      // In a real app, you'd make an API call to a '/me' or '/verify' endpoint\r\n      // to get the user's data from the server and confirm the token is valid.\r\n      // For now, we'll simulate this by decoding the token.\r\n      try {\r\n        const decodedUser = JSON.parse(atob(token.split('.')[1])); // NOTE: Not secure for production\r\n        setUser(decodedUser);\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      } catch (error) {\r\n        console.error(\"Failed to decode token on initial load:\", error);\r\n        localStorage.removeItem('token'); // Clear invalid token\r\n      }\r\n    }\r\n    setLoading(false); // Finished checking, app can now render\r\n  }, []);\r\n\r\n  // --- Authentication Functions ---\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      // In a real app, this would be:\r\n      // const response = await api.post('/auth/login', { email, password });\r\n      // const { token, user } = response.data;\r\n\r\n      // Mock implementation for demonstration:\r\n      const mockUser = { name: 'Totok Michael', email: email, role: 'Admin' };\r\n      // Create a fake JWT token for local storage\r\n      const fakeToken = `header.${btoa(JSON.stringify(mockUser))}.signature`;\r\n\r\n      localStorage.setItem('token', fakeToken);\r\n      api.defaults.headers.common['Authorization'] = `Bearer ${fakeToken}`;\r\n      setUser(mockUser);\r\n      \r\n      return mockUser;\r\n    } catch (error) {\r\n      console.error(\"Login failed:\", error);\r\n      // Here you would handle login errors (e.g., show a toast notification)\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    delete api.defaults.headers.common['Authorization'];\r\n    setUser(null);\r\n    // You would typically redirect the user to the login page here\r\n  };\r\n\r\n  // The value that will be available to all consuming components\r\n  const value = {\r\n    user,\r\n    isAuthenticated: !!user,\r\n    loading,\r\n    login,\r\n    logout,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,GAAG,MAAM,YAAY,CAAC,CAAC;;AAE9B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGN,aAAa,CAAC,IAAI,CAAC;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMY,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACT;MACA;MACA;MACA,IAAI;QACF,MAAMG,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3DV,OAAO,CAACM,WAAW,CAAC;QACpBd,GAAG,CAACmB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUV,KAAK,EAAE;MAClE,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;QAC/DV,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;MACpC;IACF;IACAd,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;;EAEN;;EAEA,MAAMe,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvC,IAAI;MACF;MACA;MACA;;MAEA;MACA,MAAMC,QAAQ,GAAG;QAAEC,IAAI,EAAE,eAAe;QAAEH,KAAK,EAAEA,KAAK;QAAEI,IAAI,EAAE;MAAQ,CAAC;MACvE;MACA,MAAMC,SAAS,GAAG,UAAUC,IAAI,CAACjB,IAAI,CAACkB,SAAS,CAACL,QAAQ,CAAC,CAAC,YAAY;MAEtEhB,YAAY,CAACsB,OAAO,CAAC,OAAO,EAAEH,SAAS,CAAC;MACxC/B,GAAG,CAACmB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUU,SAAS,EAAE;MACpEvB,OAAO,CAACoB,QAAQ,CAAC;MAEjB,OAAOA,QAAQ;IACjB,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrC;MACA,MAAMA,KAAK;IACb;EACF,CAAC;EAED,MAAMa,MAAM,GAAGA,CAAA,KAAM;IACnBvB,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;IAChC,OAAOxB,GAAG,CAACmB,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC;IACnDb,OAAO,CAAC,IAAI,CAAC;IACb;EACF,CAAC;;EAED;EACA,MAAM4B,KAAK,GAAG;IACZ7B,IAAI;IACJ8B,eAAe,EAAE,CAAC,CAAC9B,IAAI;IACvBE,OAAO;IACPgB,KAAK;IACLU;EACF,CAAC;EAED,oBACEjC,OAAA,CAACC,WAAW,CAACmC,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAA/B,QAAA,EAChC,CAACI,OAAO,IAAIJ;EAAQ;IAAAkC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B,CAAC;AAACpC,EAAA,CArEWF,YAAY;AAAAuC,EAAA,GAAZvC,YAAY;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}