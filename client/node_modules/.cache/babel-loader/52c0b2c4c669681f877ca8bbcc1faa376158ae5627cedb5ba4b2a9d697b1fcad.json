{"ast":null,"code":"import axios from 'axios';\n\n/**\r\n * ==============================================================================\r\n * FILE: /client/src/api/api.js\r\n * PURPOSE: Creates and configures a central Axios instance for all API requests.\r\n *\r\n * HOW IT WORKS:\r\n * - Sets the base URL for all requests to point to your backend server.\r\n * - Automatically includes the user's auth token in the headers of every\r\n * request after they log in.\r\n * - Sets up interceptors to handle responses and errors globally.\r\n * ==============================================================================\r\n */\n\n// Create an instance of Axios with a base configuration\nconst api = axios.create({\n  // Use environment variables for the base URL in a real project\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api/v1',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n/**\r\n * Axios Request Interceptor\r\n * This function runs before every single request is sent.\r\n * Its purpose is to check if we have a token in local storage and, if so,\r\n * attach it to the Authorization header.\r\n */\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","error","Promise","reject"],"sources":["D:/Users/MAYANK/DEV Flow/devflow-project/client/src/api/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n/**\r\n * ==============================================================================\r\n * FILE: /client/src/api/api.js\r\n * PURPOSE: Creates and configures a central Axios instance for all API requests.\r\n *\r\n * HOW IT WORKS:\r\n * - Sets the base URL for all requests to point to your backend server.\r\n * - Automatically includes the user's auth token in the headers of every\r\n * request after they log in.\r\n * - Sets up interceptors to handle responses and errors globally.\r\n * ==============================================================================\r\n */\r\n\r\n// Create an instance of Axios with a base configuration\r\nconst api = axios.create({\r\n  // Use environment variables for the base URL in a real project\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api/v1',\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n/**\r\n * Axios Request Interceptor\r\n * This function runs before every single request is sent.\r\n * Its purpose is to check if we have a token in local storage and, if so,\r\n * attach it to the Authorization header.\r\n */\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvB;EACAC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,8BAA8B;EACxEC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUK,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAI,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAed,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}